// Code generated by "stringer -type=Verdict,Mark"; DO NOT EDIT.

package netfilter

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NF_DROP-0]
	_ = x[NF_ACCEPT-1]
	_ = x[NF_STOLEN-2]
	_ = x[NF_QUEUE-3]
	_ = x[NF_REPEAT-4]
	_ = x[NF_STOP-5]
}

const _Verdict_name = "NF_DROPNF_ACCEPTNF_STOLENNF_QUEUENF_REPEATNF_STOP"

var _Verdict_index = [...]uint8{0, 7, 16, 25, 33, 42, 49}

func (i Verdict) String() string {
	if i >= Verdict(len(_Verdict_index)-1) {
		return "Verdict(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Verdict_name[_Verdict_index[i]:_Verdict_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NF_MARK_DROP-69632]
	_ = x[NF_MARK_ACCEPT-69633]
	_ = x[NF_MARK_RETURN-69634]
	_ = x[NF_MARK_DROP_LOG-69648]
	_ = x[NF_MARK_ACCEPT_LOG-69649]
	_ = x[NF_MARK_RETURN_LOG-69650]
}

const (
	_Mark_name_0 = "NF_MARK_DROPNF_MARK_ACCEPTNF_MARK_RETURN"
	_Mark_name_1 = "NF_MARK_DROP_LOGNF_MARK_ACCEPT_LOGNF_MARK_RETURN_LOG"
)

var (
	_Mark_index_0 = [...]uint8{0, 12, 26, 40}
	_Mark_index_1 = [...]uint8{0, 16, 34, 52}
)

func (i Mark) String() string {
	switch {
	case 69632 <= i && i <= 69634:
		i -= 69632
		return _Mark_name_0[_Mark_index_0[i]:_Mark_index_0[i+1]]
	case 69648 <= i && i <= 69650:
		i -= 69648
		return _Mark_name_1[_Mark_index_1[i]:_Mark_index_1[i+1]]
	default:
		return "Mark(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
